#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket:server');
var http = require('http');
var stream = require( '../ws/stream' );

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io establish connect
 */

const { Server } = require("socket.io");
const users = {};

const socketToRoom = {};

const io = new Server(server,{
  cors:{
    origin: '*',
    methods: ["GET", "POST"]
  }
});

io.of( '/stream' ).on( 'connection', stream );

// io.on("connection", (socket) => {
//   socket.emit("me", socket.id);
//
//   socket.on("disconnect", () => {
//     socket.broadcast.emit("callEnded")
//   });
//
//   socket.on("callUser", ({ userToCall, signalData, from, name }) => {
//     io.to(userToCall).emit("callUser", { signal: signalData, from, name });
//   });
//
//   socket.on("answerCall", (data) => {
//     io.to(data.to).emit("callAccepted", data.signal)
//   });
//
//
//   socket.on("join room", roomID => {
//     if (users[roomID]) {
//       const length = users[roomID].length;
//       if (length === 4) {
//         socket.emit("room full");
//         return;
//       }
//       users[roomID].push(socket.id);
//     } else {
//       users[roomID] = [socket.id];
//     }
//     socketToRoom[socket.id] = roomID;
//     const usersInThisRoom = users[roomID].filter(id => id !== socket.id);
//
//     socket.emit("all users", usersInThisRoom);
//   });
//
//   socket.on("sending signal", payload => {
//     io.to(payload.userToSignal).emit('user joined', { signal: payload.signal, callerID: payload.callerID });
//   });
//
//   socket.on("returning signal", payload => {
//     io.to(payload.callerID).emit('receiving returned signal', { signal: payload.signal, id: socket.id });
//   });
//
//   socket.on('disconnect', () => {
//     const roomID = socketToRoom[socket.id];
//     let room = users[roomID];
//     if (room) {
//       room = room.filter(id => id !== socket.id);
//       users[roomID] = room;
//     }
//   });
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
